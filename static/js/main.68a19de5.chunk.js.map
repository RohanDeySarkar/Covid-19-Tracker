{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","console","log","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","res","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setInputCountry","setCountryInfo","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","tableData","setTableData","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.68a19de5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({title, cases, total, active, isRed, ...props}) {\r\n    return (\r\n        <Card\r\n            onClick={props.onClick}\r\n            // always add class infoBox, then if active add a class, if isRed add a class\r\n            className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}\r\n        >\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n                    {cases}\r\n                </h2>\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 0.109,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 0.12,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 0.12,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    // copy that into an array\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1 ))\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") => \r\n// create circles for each country\r\n  data.map((country) => (\r\n      <Circle\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        fillOpacity={0.4}\r\n        radius={\r\n          country[casesType] * casesTypeColors[casesType].multiplier\r\n        }\r\n      >\r\n          <Popup>\r\n            <div className=\"info-container\">\r\n              <div\r\n                className=\"info-flag\"\r\n                style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n              >\r\n              </div>\r\n              <div className=\"info-name\" >\r\n                {country.country}\r\n              </div>\r\n              <div className=\"info-confirmed\">\r\n                Cases: {numeral(country.cases).format(\"0,0\")}\r\n              </div>\r\n              <div className=\"info-confirmed\">\r\n                Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n              </div>\r\n              <div className=\"info-confirmed\">\r\n                Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n              </div>\r\n            </div>\r\n          </Popup>\r\n      </Circle>\r\n));","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\n\r\nimport { showDataOnMap } from \"./util\"\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Map;","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport './Table.css';\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map((country) => (\r\n                <tr>\r\n                    <td>{country.country}</td>\r\n                    <td>{numeral(country.cases).format(\"0,0\")}</td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  console.log(data);\r\n    // for (let date in data.cases)\r\n  for (let date in data[casesType]) {\r\n      \r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        //   console.log(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {/* before fetching, the data is empty, so will give an error. \r\n          so check the length and return undefined if length is 0.\r\n          error fixed\r\n          */}\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\n\nimport \"leaflet/dist/leaflet.css\";\n\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\n\nimport {sortData, prettyPrintStat} from './util';\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setInputCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((res) => \n      res.json()\n    )\n    .then((data) => {\n      setCountryInfo(data);\n    });\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async() => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((res) => \n        res.json()\n      )\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }\n        ));\n\n        let sortedData = sortData(data);\n\n        setCountries(countries);\n        setMapCountries(data);\n        setTableData(sortedData);\n      });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url = countryCode === \"worldwide\" ?\n    \"https://disease.sh/v3/covid-19/all\"\n    :\n    `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((res) => \n        res.json()\n      )\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19 Meter</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              // show the val on the select container\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox \n            onClick={() => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases Today\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox \n            onClick={() => setCasesType(\"recovered\")}\n            title=\"Recovered Today\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox \n            onClick={() => setCasesType(\"deaths\")}\n            title=\"Deaths Today\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map \n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table\n              countries={tableData}\n            />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph\n              casesType={casesType}\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}